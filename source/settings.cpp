#include <string.h>
#include "settings.h"

#define DEFAULT_CONFIG_PATH "/gameconfig.txt"
#define DEFAULT_CHEAT_FOLDER "/codes"
#define DEFAULT_IOS -1 // -1 means use the IOS from the disc

Settings AppConfig;

Settings::Settings()
{
    this->ResetSettings();
}
void Settings::parseLine(const char *line)
{
    // Parse the line
    std::string strLine = line;
    std::string setting = strLine.substr(0, strLine.find('='));
    std::string value = strLine.substr(strLine.find('=') + 1);

    // Trim the setting and value strings of any leading or trailing whitespace
    setting.erase(0, setting.find_first_not_of(" \n\r\t"));
    setting.erase(setting.find_last_not_of(" \n\r\t") + 1);
    value.erase(0, value.find_first_not_of(" \n\r\t"));
    value.erase(value.find_last_not_of(" \n\r\t") + 1);

    // Set the setting
    SetSetting(setting.c_str(), value.c_str());
}
void Settings::SetSetting(const char *setting, const char *value)
{
    // Ignore comments
    if (setting[0] == '/' && setting[1] == '/')
        return;

    // Set the setting
    if (strcmp(setting, "ConfigPath") == 0)
    {
        strncpy(ConfigPath, value, sizeof(ConfigPath));
    }
    else if (strcmp(setting, "CheatFolder") == 0)
    {
        strncpy(CheatFolder, value, sizeof(CheatFolder));
    }
    else if (strcmp(setting, "IOS") == 0)
    {
        IOS = atoi(value);
    }
}

void Settings::LoadSettings(const char *path)
{
    // Load the settings
    FILE *f = fopen(path, "rb");
    if (f != NULL)
    {
        char line[255];
        while (fgets(line, sizeof(line), f))
        {
            parseLine(line);
        }
        fclose(f);
    }
}

void Settings::SaveSettings(const char *path)
{
    // Save the settings
    FILE *f = fopen(path, "wb");
    if (f != NULL)
    {
        fprintf(f, "// Minima Settings\n");
        fprintf(f, "// This file is automatically generated\n\n");
        fprintf(f, "ConfigPath = %s\n", ConfigPath);
        fprintf(f, "CheatFolder = %s\n", CheatFolder);
        if (IOS == -1)
        {
            fprintf(f, "\n// Uncomment the line below and replace \"-1\" with the desired IOS number in order to use a specific IOS\n");
            fprintf(f, "// IOS = -1\n");
        }
        else
        {
            fprintf(f, "IOS = %i\n", IOS);
        }
        fclose(f);
    }
}

void Settings::ResetSettings()
{
    // Set the default settings
    strncpy(ConfigPath, DEFAULT_CONFIG_PATH, sizeof(ConfigPath));
    strncpy(CheatFolder, DEFAULT_CHEAT_FOLDER, sizeof(CheatFolder));
    IOS = DEFAULT_IOS;
}